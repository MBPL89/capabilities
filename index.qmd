---
title: "Capabilities network"
format:
  html:
    toc: true
---

```{r}
#| echo: false
#| warning: false
# Load necessary libraries
library(igraph)
library(visNetwork)
library(readr)
library(dplyr)
library(RColorBrewer)
library(DT)
library(tidyverse)
```

```{r}
#| echo: false
#| warning: false
# Load CSV file
csv_file <- "capab_rmd_cat.csv"  # Change to your actual file path
df <- read_csv(csv_file)
```

```{r}
#| echo: false
# Remove duplicates
df <- distinct(df)
```

```{r}
#| echo: false
# Create unique node list (ensuring no duplicates)
nodes_info <- df %>%
  select(name = c_name, category, definition) %>%
  bind_rows(df %>% select(name = sub_name)) %>%
  distinct(name, .keep_all = TRUE) 
nodes_info <- nodes_info %>%
  mutate(category=replace_na(category, "Other"))
```

```{r}
#| echo: false
#| warning: false
# Assign groups based on c_type (ensuring consistent order)
category_levels <- unique(nodes_info$category)
nodes_info$group <- as.numeric(factor(nodes_info$category, levels = category_levels)) 

# Define color palette based on the number of unique categories
num_categories <- length(category_levels)
color_palette <- brewer.pal(min(num_categories, 9), "Set1")  # Supports up to 9 distinct colors

# Define node shapes (cycling through if there are more categories)
shapes <- c("dot", "triangle", "square", "diamond", "star", "hexagon", "ellipse", "box", "icon")
nodes_info$shape <- shapes[(nodes_info$group - 1) %% length(shapes) + 1]  # Cycles if needed

# Assign color based on category
nodes_info$color <- color_palette[(nodes_info$group - 1) %% length(color_palette) + 1]
```

```{r}
#| echo: false
# Create edges (relationships between nodes)
edges_df <- df %>%
  mutate(relation = gsub(" ", "_", relation)) %>%
  select(from = c_name, to = sub_name, label = relation)
```

```{r}
#| echo: false
#| warning: false
# Ensure nodes_df only contains unique nodes before creating graph
nodes_df <- data.frame(
  id = nodes_info$name, 
  label = nodes_info$name, 
  group = nodes_info$group, 
  color = nodes_info$color, 
  shape = nodes_info$shape
)
```


```{r}
#| echo: false
#| warning: false
graph <- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = TRUE)
```

```{r}
#| echo: false
# Calculate Centrality Metrics
degree_centrality <- degree(graph, mode = "all")  # Count all incoming/outgoing edges
closeness_centrality <- closeness(graph, mode = "all", normalized = TRUE)  # Closeness measure

# Merge centrality scores into nodes_info
nodes_info$degree_centrality <- degree_centrality[match(nodes_info$name, names(degree_centrality))]
nodes_info$closeness_centrality <- closeness_centrality[match(nodes_info$name, names(closeness_centrality))]

# Fix NA values (if a node has no edges, centrality might be NA)
nodes_info$degree_centrality[is.na(nodes_info$degree_centrality)] <- 0
nodes_info$closeness_centrality[is.na(nodes_info$closeness_centrality)] <- 0

# Scale node size based on degree centrality
nodes_df$size <- (nodes_info$degree_centrality + 1) * 5  # Scale up
```

```{r}
#| echo: false
#| warning: false
# Create a proper legend
legend_df <- data.frame(
  label = category_levels,
  shape = shapes[1:num_categories],  # Match unique categories
  color = color_palette[1:num_categories]
)
```

## Network graph

```{r}
#| echo: false
#| fig-cap: "Banking Business Capabilities"
# Create interactive network graph
visNetwork(nodes_df, edges_df) %>%
  visEdges(arrows = "to") %>%  # Add arrowheads
  visNodes(size = nodes_df$size) %>%
  visGroups(groupname = "1", color = color_palette[1], shape = shapes[1]) %>%
  visGroups(groupname = "2", color = color_palette[2], shape = shapes[2]) %>%
  visGroups(groupname = "3", color = color_palette[3], shape = shapes[3]) %>%
  visGroups(groupname = "4", color = color_palette[4], shape = shapes[4]) %>%
  visGroups(groupname = "5", color = color_palette[5], shape = shapes[5]) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 42) %>%  # Consistent layout
  visPhysics(enabled = TRUE) %>%
  visLegend(addNodes = legend_df, useGroups = FALSE)
```


## Data Table

```{r}
#| echo: false
#| warning: false
nodes_df <- nodes_df %>%
  left_join(
    df %>% select(name = c_name, definition) %>% distinct(),
    by = c("id" = "name")
  )
```

```{r}
#| echo: false
#| warning: false
# Create interactive datatable of nodes with definitions
datatable(
  nodes_info %>% select(name, category, definition, degree_centrality, closeness_centrality),
  options = list(pageLength = 10, searchHighlight = TRUE),
  rownames = FALSE,
  caption = "Nodes, Definitions, Categories, and Centrality Metrics"
)
```
